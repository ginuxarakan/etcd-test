// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	UserCallTest(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error)
	StreamInput(ctx context.Context, in *StreamInputReq, opts ...grpc.CallOption) (*StreamInputResp, error)
	StreamTest(ctx context.Context, in *StreamTestReq, opts ...grpc.CallOption) (UserService_StreamTestClient, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) UserCallTest(ctx context.Context, in *UserReq, opts ...grpc.CallOption) (*UserResp, error) {
	out := new(UserResp)
	err := c.cc.Invoke(ctx, "/pb.UserService/UserCallTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StreamInput(ctx context.Context, in *StreamInputReq, opts ...grpc.CallOption) (*StreamInputResp, error) {
	out := new(StreamInputResp)
	err := c.cc.Invoke(ctx, "/pb.UserService/StreamInput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) StreamTest(ctx context.Context, in *StreamTestReq, opts ...grpc.CallOption) (UserService_StreamTestClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/pb.UserService/StreamTest", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceStreamTestClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserService_StreamTestClient interface {
	Recv() (*StreamTestResp, error)
	grpc.ClientStream
}

type userServiceStreamTestClient struct {
	grpc.ClientStream
}

func (x *userServiceStreamTestClient) Recv() (*StreamTestResp, error) {
	m := new(StreamTestResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	UserCallTest(context.Context, *UserReq) (*UserResp, error)
	StreamInput(context.Context, *StreamInputReq) (*StreamInputResp, error)
	StreamTest(*StreamTestReq, UserService_StreamTestServer) error
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) UserCallTest(context.Context, *UserReq) (*UserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCallTest not implemented")
}
func (UnimplementedUserServiceServer) StreamInput(context.Context, *StreamInputReq) (*StreamInputResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamInput not implemented")
}
func (UnimplementedUserServiceServer) StreamTest(*StreamTestReq, UserService_StreamTestServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamTest not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_UserCallTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UserCallTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/UserCallTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UserCallTest(ctx, req.(*UserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StreamInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamInputReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).StreamInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserService/StreamInput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).StreamInput(ctx, req.(*StreamInputReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_StreamTest_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTestReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServiceServer).StreamTest(m, &userServiceStreamTestServer{stream})
}

type UserService_StreamTestServer interface {
	Send(*StreamTestResp) error
	grpc.ServerStream
}

type userServiceStreamTestServer struct {
	grpc.ServerStream
}

func (x *userServiceStreamTestServer) Send(m *StreamTestResp) error {
	return x.ServerStream.SendMsg(m)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserCallTest",
			Handler:    _UserService_UserCallTest_Handler,
		},
		{
			MethodName: "StreamInput",
			Handler:    _UserService_StreamInput_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTest",
			Handler:       _UserService_StreamTest_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "user.proto",
}
